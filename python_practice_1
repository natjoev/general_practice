{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d20ebf90",
   "metadata": {},
   "source": [
    "### This is my practice notebook for problem solving in python and datastufffff\n",
    "##### This might serve as a sketch or wtvr..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fb1fcd0",
   "metadata": {},
   "source": [
    "##### first task is to create a histogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "ef4ab671",
   "metadata": {},
   "outputs": [],
   "source": [
    "# step one is to import libraries\n",
    "import numpy as np # numpy is for numerical operations\n",
    "import pandas as pd # pandas is for data manipulation\n",
    "import matplotlib.pyplot as plt # matplotlib is for plotting   \n",
    "import seaborn as sns # seaborn is for statistical data visualization\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "7e6a3149",
   "metadata": {},
   "outputs": [],
   "source": [
    "# step two is to import data set\n",
    "# note: this was copy pasted from the lecture notebook. The path is already set up to work on this machine.\n",
    "path = \"/Users/ael/OneDrive/Desktop/138/\" # this defines the path to the main directory\n",
    "apis_path = path + \"03_data/PHL-PSA-APIS-2022-PUF/\" # this defines the path to the data directory\n",
    "hh_rec = pd.read_csv(apis_path + \"APIS PUF 2022 Household Record.CSV\") # this makes a dataframe from the csv file\n",
    "apis_rtk = pd.read_csv(apis_path + \"APIS PUF 2022 RTK - Other Relevant Information.CSV\", on_bad_lines='skip')\n",
    "# the on_bad_lines='skip' argument is used to skip lines with too many fields"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "9ebff294",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REG</th>\n",
       "      <th>HHID</th>\n",
       "      <th>FSIZE</th>\n",
       "      <th>CHLD_6_11</th>\n",
       "      <th>CHLD_12_15</th>\n",
       "      <th>EDUC_6_11</th>\n",
       "      <th>EDUC_12_15</th>\n",
       "      <th>HHMELEM_6_11</th>\n",
       "      <th>HHMHS_12_15</th>\n",
       "      <th>H04_SEX</th>\n",
       "      <th>H05_AGE</th>\n",
       "      <th>H06_STATUS</th>\n",
       "      <th>H12_HGC</th>\n",
       "      <th>URB</th>\n",
       "      <th>RPSU</th>\n",
       "      <th>REP</th>\n",
       "      <th>RFACT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td>1</td>\n",
       "      <td>32</td>\n",
       "      <td>2</td>\n",
       "      <td>24015</td>\n",
       "      <td>2</td>\n",
       "      <td>227</td>\n",
       "      <td>6</td>\n",
       "      <td>187.7847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td>1</td>\n",
       "      <td>42</td>\n",
       "      <td>2</td>\n",
       "      <td>24015</td>\n",
       "      <td>2</td>\n",
       "      <td>227</td>\n",
       "      <td>6</td>\n",
       "      <td>187.7847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>3</td>\n",
       "      <td>10018</td>\n",
       "      <td>2</td>\n",
       "      <td>227</td>\n",
       "      <td>6</td>\n",
       "      <td>187.7847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>2</td>\n",
       "      <td>24015</td>\n",
       "      <td>2</td>\n",
       "      <td>227</td>\n",
       "      <td>6</td>\n",
       "      <td>187.7847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "      <td>10018</td>\n",
       "      <td>2</td>\n",
       "      <td>227</td>\n",
       "      <td>6</td>\n",
       "      <td>187.7847</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   REG  HHID  FSIZE  CHLD_6_11  CHLD_12_15  EDUC_6_11  EDUC_12_15  \\\n",
       "0   14     1      5          1           0          1           0   \n",
       "1   14     2      6          1           0          1           0   \n",
       "2   14     3      3          0           0          0           0   \n",
       "3   14     4      4          0           0          0           0   \n",
       "4   14     5      1          0           0          0           0   \n",
       "\n",
       "  HHMELEM_6_11 HHMHS_12_15  H04_SEX  H05_AGE  H06_STATUS  H12_HGC  URB  RPSU  \\\n",
       "0            1                    1       32           2    24015    2   227   \n",
       "1            1                    1       42           2    24015    2   227   \n",
       "2                                 1       44           3    10018    2   227   \n",
       "3                                 1       49           2    24015    2   227   \n",
       "4                                 1       53           1    10018    2   227   \n",
       "\n",
       "   REP     RFACT  \n",
       "0    6  187.7847  \n",
       "1    6  187.7847  \n",
       "2    6  187.7847  \n",
       "3    6  187.7847  \n",
       "4    6  187.7847  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# to test if it worked\n",
    "hh_rec.head() # by default, this shows the first 5 rows, but you can specify the number of rows to show by putting a number in the parentheses"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6afa1754",
   "metadata": {},
   "source": [
    "### looks fine, but it might need some cleaning\n",
    "**some tips on cleaning**\n",
    "- check for nulls, and how to treat them \n",
    "- check for inconsistencies and typos \n",
    "- check for duplicates and outliers that might skew data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "a8165489",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "REG             0\n",
      "HHID            0\n",
      "FSIZE           0\n",
      "CHLD_6_11       0\n",
      "CHLD_12_15      0\n",
      "EDUC_6_11       0\n",
      "EDUC_12_15      0\n",
      "HHMELEM_6_11    0\n",
      "HHMHS_12_15     0\n",
      "H04_SEX         0\n",
      "H05_AGE         0\n",
      "H06_STATUS      0\n",
      "H12_HGC         0\n",
      "URB             0\n",
      "RPSU            0\n",
      "REP             0\n",
      "RFACT           0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# checking for nulls\n",
    "print(hh_rec.isnull().sum())\n",
    "# this shows the number of nulls in each column, handy cuz it automatically groups it by all columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d3516df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 5  6  3  4  1  7  2 10 11 13  8  9 12 14 17 15 16 19 20]\n"
     ]
    }
   ],
   "source": [
    "# since there are no nulls, we can check if there are any weird values in the FSIZE variable\n",
    "# note that we can review a dictiionary provided by the PSA for the necessary variables\n",
    "print(hh_rec['FSIZE'].unique()) # the unique function shows all unique values in a column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "35b5752c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 4 entries, 15599 to 29752\n",
      "Data columns (total 17 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   REG           4 non-null      int64  \n",
      " 1   HHID          4 non-null      int64  \n",
      " 2   FSIZE         4 non-null      int64  \n",
      " 3   CHLD_6_11     4 non-null      int64  \n",
      " 4   CHLD_12_15    4 non-null      int64  \n",
      " 5   EDUC_6_11     4 non-null      int64  \n",
      " 6   EDUC_12_15    4 non-null      int64  \n",
      " 7   HHMELEM_6_11  4 non-null      object \n",
      " 8   HHMHS_12_15   4 non-null      object \n",
      " 9   H04_SEX       4 non-null      int64  \n",
      " 10  H05_AGE       4 non-null      int64  \n",
      " 11  H06_STATUS    4 non-null      int64  \n",
      " 12  H12_HGC       4 non-null      int64  \n",
      " 13  URB           4 non-null      int64  \n",
      " 14  RPSU          4 non-null      int64  \n",
      " 15  REP           4 non-null      int64  \n",
      " 16  RFACT         4 non-null      float64\n",
      "dtypes: float64(1), int64(14), object(2)\n",
      "memory usage: 576.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "# I wanna know how many HHs have more than 17 members\n",
    "large_hh = hh_rec[hh_rec['FSIZE'] > 17] \n",
    "large_hh.info() # this shows the info of the dataframe, including number of rows"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55229450",
   "metadata": {},
   "source": [
    "#### maybe i should keep them? i don't think it matters lol "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "db16832f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]\n"
     ]
    }
   ],
   "source": [
    "# looks good, now for completeness, lets check the REG variable \n",
    "unq_reg = hh_rec['REG'].unique() # you must assign it to a variable to manipulate it\n",
    "unq_reg.sort() # you can now sort it since it is assigned to a variable\n",
    "print(unq_reg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "586177c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "# final cleaning step (i guess) is to check for duplicates\n",
    "print(hh_rec.duplicated().sum()) # this shows the number of duplicate rows in the dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3eb50cb1",
   "metadata": {},
   "source": [
    "#### NOW FOR THE HISTOGRAM! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "562ab6fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    REG     FSIZE\n",
      "0     1  4.094909\n",
      "1     2  3.999427\n",
      "2     3  4.334374\n",
      "3     4  4.212219\n",
      "4     5  4.456578\n",
      "5     6  4.155844\n",
      "6     7  4.120690\n",
      "7     8  4.366443\n",
      "8     9  4.179473\n",
      "9    10  4.297647\n",
      "10   11  3.996160\n",
      "11   12  4.208852\n",
      "12   13  3.988748\n",
      "13   14  4.050678\n",
      "14   15  4.605263\n",
      "15   16  4.426623\n",
      "16   17  4.076657\n"
     ]
    }
   ],
   "source": [
    "# step 3 is to make the necessary variables \n",
    "# im interested in the average household size by region\n",
    "avg_hh_size = hh_rec.groupby('REG')['FSIZE'].mean().reset_index() # reset index makes it a dataframe again\n",
    "print(avg_hh_size.sort_values(by = 'REG'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "18c14da4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Average Household Size')"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# now that we have the necessary variables, we can make the histogram\n",
    "# step 4 is to make the histogram\n",
    "sns.histplot(avg_hh_size, kde = False) #kde = false removes the line\n",
    "plt.title('Household Size Distribution in the Philippines, 2022') # this adds a title to the histogram\n",
    "plt.xlabel('Region') # this adds a label to the x-axis\n",
    "plt.ylabel('Average Household Size') # this adds a label to the y-axis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "eb77a776",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Average Household Size')"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ok so a histogram is not the best way to show this data, a bar chart would be better\n",
    "sns.barplot(data = avg_hh_size, x = 'REG', y = 'FSIZE')\n",
    "plt.title('Average Household Size by Region in the Philippines, 2022')\n",
    "plt.xlabel('Region')\n",
    "plt.ylabel('Average Household Size')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "6a8c0fcc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ael\\AppData\\Local\\Temp\\ipykernel_4536\\350067028.py:3: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.barplot(data = avg_hh_size, x = 'REG', y = 'FSIZE', palette = 'flare')\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Average Household Size')"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# i want to make the chart bigger, so...\n",
    "sns.set(rc={'figure.figsize':(10,6)}) # this sets the figure size for all plots\n",
    "sns.barplot(data = avg_hh_size, x = 'REG', y = 'FSIZE', palette = 'flare')\n",
    "plt.title('Average Household Size by Region in the Philippines, 2022')\n",
    "plt.xlabel('Region')\n",
    "plt.ylabel('Average Household Size')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a48f722",
   "metadata": {},
   "source": [
    "### some stuff  i learned\n",
    "- sometimes you need to call specific values or columns into another dataframe in order to manipulate it easier\n",
    "- for example, making a subset of a df and then sorting it, like `df_subset = ['col'].unique`, and then `df_subset.sort`\n",
    " "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

